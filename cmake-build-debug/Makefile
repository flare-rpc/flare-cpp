# CMAKE generated file: DO NOT EDIT!
# Generated by "Unix Makefiles" Generator, CMake Version 3.19

# Default target executed when no arguments are given to make.
default_target: all

.PHONY : default_target

# Allow only one "make -f Makefile2" at a time, but pass parallelism.
.NOTPARALLEL:


#=============================================================================
# Special targets provided by cmake.

# Disable implicit rules so canonical targets will work.
.SUFFIXES:


# Disable VCS-based implicit rules.
% : %,v


# Disable VCS-based implicit rules.
% : RCS/%


# Disable VCS-based implicit rules.
% : RCS/%,v


# Disable VCS-based implicit rules.
% : SCCS/s.%


# Disable VCS-based implicit rules.
% : s.%


.SUFFIXES: .hpux_make_needs_suffix_list


# Command-line flag to silence nested $(MAKE).
$(VERBOSE)MAKESILENT = -s

#Suppress display of executed commands.
$(VERBOSE).SILENT:

# A target that is always out of date.
cmake_force:

.PHONY : cmake_force

#=============================================================================
# Set environment variables for the build.

# The shell in which to execute make rules.
SHELL = /bin/sh

# The CMake executable.
CMAKE_COMMAND = /Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake

# The command to remove a file.
RM = /Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -E rm -f

# Escaping for special characters.
EQUALS = =

# The top-level source directory on which CMake was run.
CMAKE_SOURCE_DIR = /Users/liyinbin/github/flare-rpc/flare-cpp

# The top-level build directory on which CMake was run.
CMAKE_BINARY_DIR = /Users/liyinbin/github/flare-rpc/flare-cpp/cmake-build-debug

#=============================================================================
# Targets provided globally by CMake.

# Special rule for the target install/local
install/local: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
.PHONY : install/local

# Special rule for the target install/local
install/local/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing only the local directory..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -DCMAKE_INSTALL_LOCAL_ONLY=1 -P cmake_install.cmake
.PHONY : install/local/fast

# Special rule for the target install/strip
install/strip: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
.PHONY : install/strip

# Special rule for the target install/strip
install/strip/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Installing the project stripped..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -DCMAKE_INSTALL_DO_STRIP=1 -P cmake_install.cmake
.PHONY : install/strip/fast

# Special rule for the target install
install: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -P cmake_install.cmake
.PHONY : install

# Special rule for the target install
install/fast: preinstall/fast
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Install the project..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -P cmake_install.cmake
.PHONY : install/fast

# Special rule for the target list_install_components
list_install_components:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Available install components are: \"Unspecified\""
.PHONY : list_install_components

# Special rule for the target list_install_components
list_install_components/fast: list_install_components

.PHONY : list_install_components/fast

# Special rule for the target package_source
package_source:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool for source..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cpack --config ./CPackSourceConfig.cmake /Users/liyinbin/github/flare-rpc/flare-cpp/cmake-build-debug/CPackSourceConfig.cmake
.PHONY : package_source

# Special rule for the target package_source
package_source/fast: package_source

.PHONY : package_source/fast

# Special rule for the target rebuild_cache
rebuild_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Running CMake to regenerate build system..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake --regenerate-during-build -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR)
.PHONY : rebuild_cache

# Special rule for the target rebuild_cache
rebuild_cache/fast: rebuild_cache

.PHONY : rebuild_cache/fast

# Special rule for the target edit_cache
edit_cache:
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "No interactive CMake dialog available..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake -E echo No\ interactive\ CMake\ dialog\ available.
.PHONY : edit_cache

# Special rule for the target edit_cache
edit_cache/fast: edit_cache

.PHONY : edit_cache/fast

# Special rule for the target package
package: preinstall
	@$(CMAKE_COMMAND) -E cmake_echo_color --switch=$(COLOR) --cyan "Run CPack packaging tool..."
	/Applications/CLion.app/Contents/bin/cmake/mac/bin/cpack --config ./CPackConfig.cmake
.PHONY : package

# Special rule for the target package
package/fast: package

.PHONY : package/fast

# The main all target
all: cmake_check_build_system
	$(CMAKE_COMMAND) -E cmake_progress_start /Users/liyinbin/github/flare-rpc/flare-cpp/cmake-build-debug/CMakeFiles /Users/liyinbin/github/flare-rpc/flare-cpp/cmake-build-debug//CMakeFiles/progress.marks
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 all
	$(CMAKE_COMMAND) -E cmake_progress_start /Users/liyinbin/github/flare-rpc/flare-cpp/cmake-build-debug/CMakeFiles 0
.PHONY : all

# The main clean target
clean:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 clean
.PHONY : clean

# The main clean target
clean/fast: clean

.PHONY : clean/fast

# Prepare targets for installation.
preinstall: all
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
.PHONY : preinstall

# Prepare targets for installation.
preinstall/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 preinstall
.PHONY : preinstall/fast

# clear depends
depend:
	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 1
.PHONY : depend

#=============================================================================
# Target rules for targets named PROTO_LIB

# Build rule for target.
PROTO_LIB: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 PROTO_LIB
.PHONY : PROTO_LIB

# fast build rule for target.
PROTO_LIB/fast:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/build
.PHONY : PROTO_LIB/fast

#=============================================================================
# Target rules for targets named SOURCES_LIB

# Build rule for target.
SOURCES_LIB: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 SOURCES_LIB
.PHONY : SOURCES_LIB

# fast build rule for target.
SOURCES_LIB/fast:
	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/SOURCES_LIB.dir/build.make src/CMakeFiles/SOURCES_LIB.dir/build
.PHONY : SOURCES_LIB/fast

#=============================================================================
# Target rules for targets named protoc-gen-mcpack

# Build rule for target.
protoc-gen-mcpack: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 protoc-gen-mcpack
.PHONY : protoc-gen-mcpack

# fast build rule for target.
protoc-gen-mcpack/fast:
	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/protoc-gen-mcpack.dir/build.make src/CMakeFiles/protoc-gen-mcpack.dir/build
.PHONY : protoc-gen-mcpack/fast

#=============================================================================
# Target rules for targets named brpc-static

# Build rule for target.
brpc-static: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 brpc-static
.PHONY : brpc-static

# fast build rule for target.
brpc-static/fast:
	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/brpc-static.dir/build.make src/CMakeFiles/brpc-static.dir/build
.PHONY : brpc-static/fast

#=============================================================================
# Target rules for targets named brpc-shared

# Build rule for target.
brpc-shared: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 brpc-shared
.PHONY : brpc-shared

# fast build rule for target.
brpc-shared/fast:
	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/brpc-shared.dir/build.make src/CMakeFiles/brpc-shared.dir/build
.PHONY : brpc-shared/fast

#=============================================================================
# Target rules for targets named BUTIL_LIB

# Build rule for target.
BUTIL_LIB: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 BUTIL_LIB
.PHONY : BUTIL_LIB

# fast build rule for target.
BUTIL_LIB/fast:
	$(MAKE) $(MAKESILENT) -f src/CMakeFiles/BUTIL_LIB.dir/build.make src/CMakeFiles/BUTIL_LIB.dir/build
.PHONY : BUTIL_LIB/fast

#=============================================================================
# Target rules for targets named parallel_http

# Build rule for target.
parallel_http: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 parallel_http
.PHONY : parallel_http

# fast build rule for target.
parallel_http/fast:
	$(MAKE) $(MAKESILENT) -f tools/parallel_http/CMakeFiles/parallel_http.dir/build.make tools/parallel_http/CMakeFiles/parallel_http.dir/build
.PHONY : parallel_http/fast

#=============================================================================
# Target rules for targets named rpc_press

# Build rule for target.
rpc_press: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_press
.PHONY : rpc_press

# fast build rule for target.
rpc_press/fast:
	$(MAKE) $(MAKESILENT) -f tools/rpc_press/CMakeFiles/rpc_press.dir/build.make tools/rpc_press/CMakeFiles/rpc_press.dir/build
.PHONY : rpc_press/fast

#=============================================================================
# Target rules for targets named rpc_replay

# Build rule for target.
rpc_replay: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_replay
.PHONY : rpc_replay

# fast build rule for target.
rpc_replay/fast:
	$(MAKE) $(MAKESILENT) -f tools/rpc_replay/CMakeFiles/rpc_replay.dir/build.make tools/rpc_replay/CMakeFiles/rpc_replay.dir/build
.PHONY : rpc_replay/fast

#=============================================================================
# Target rules for targets named rpc_view

# Build rule for target.
rpc_view: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 rpc_view
.PHONY : rpc_view

# fast build rule for target.
rpc_view/fast:
	$(MAKE) $(MAKESILENT) -f tools/rpc_view/CMakeFiles/rpc_view.dir/build.make tools/rpc_view/CMakeFiles/rpc_view.dir/build
.PHONY : rpc_view/fast

#=============================================================================
# Target rules for targets named trackme_server

# Build rule for target.
trackme_server: cmake_check_build_system
	$(MAKE) $(MAKESILENT) -f CMakeFiles/Makefile2 trackme_server
.PHONY : trackme_server

# fast build rule for target.
trackme_server/fast:
	$(MAKE) $(MAKESILENT) -f tools/trackme_server/CMakeFiles/trackme_server.dir/build.make tools/trackme_server/CMakeFiles/trackme_server.dir/build
.PHONY : trackme_server/fast

brpc/builtin_service.pb.o: brpc/builtin_service.pb.cc.o

.PHONY : brpc/builtin_service.pb.o

# target to build an object file
brpc/builtin_service.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.o
.PHONY : brpc/builtin_service.pb.cc.o

brpc/builtin_service.pb.i: brpc/builtin_service.pb.cc.i

.PHONY : brpc/builtin_service.pb.i

# target to preprocess a source file
brpc/builtin_service.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.i
.PHONY : brpc/builtin_service.pb.cc.i

brpc/builtin_service.pb.s: brpc/builtin_service.pb.cc.s

.PHONY : brpc/builtin_service.pb.s

# target to generate assembly for a file
brpc/builtin_service.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/builtin_service.pb.cc.s
.PHONY : brpc/builtin_service.pb.cc.s

brpc/errno.pb.o: brpc/errno.pb.cc.o

.PHONY : brpc/errno.pb.o

# target to build an object file
brpc/errno.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.o
.PHONY : brpc/errno.pb.cc.o

brpc/errno.pb.i: brpc/errno.pb.cc.i

.PHONY : brpc/errno.pb.i

# target to preprocess a source file
brpc/errno.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.i
.PHONY : brpc/errno.pb.cc.i

brpc/errno.pb.s: brpc/errno.pb.cc.s

.PHONY : brpc/errno.pb.s

# target to generate assembly for a file
brpc/errno.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/errno.pb.cc.s
.PHONY : brpc/errno.pb.cc.s

brpc/get_favicon.pb.o: brpc/get_favicon.pb.cc.o

.PHONY : brpc/get_favicon.pb.o

# target to build an object file
brpc/get_favicon.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.o
.PHONY : brpc/get_favicon.pb.cc.o

brpc/get_favicon.pb.i: brpc/get_favicon.pb.cc.i

.PHONY : brpc/get_favicon.pb.i

# target to preprocess a source file
brpc/get_favicon.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.i
.PHONY : brpc/get_favicon.pb.cc.i

brpc/get_favicon.pb.s: brpc/get_favicon.pb.cc.s

.PHONY : brpc/get_favicon.pb.s

# target to generate assembly for a file
brpc/get_favicon.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_favicon.pb.cc.s
.PHONY : brpc/get_favicon.pb.cc.s

brpc/get_js.pb.o: brpc/get_js.pb.cc.o

.PHONY : brpc/get_js.pb.o

# target to build an object file
brpc/get_js.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.o
.PHONY : brpc/get_js.pb.cc.o

brpc/get_js.pb.i: brpc/get_js.pb.cc.i

.PHONY : brpc/get_js.pb.i

# target to preprocess a source file
brpc/get_js.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.i
.PHONY : brpc/get_js.pb.cc.i

brpc/get_js.pb.s: brpc/get_js.pb.cc.s

.PHONY : brpc/get_js.pb.s

# target to generate assembly for a file
brpc/get_js.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/get_js.pb.cc.s
.PHONY : brpc/get_js.pb.cc.s

brpc/nshead_meta.pb.o: brpc/nshead_meta.pb.cc.o

.PHONY : brpc/nshead_meta.pb.o

# target to build an object file
brpc/nshead_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.o
.PHONY : brpc/nshead_meta.pb.cc.o

brpc/nshead_meta.pb.i: brpc/nshead_meta.pb.cc.i

.PHONY : brpc/nshead_meta.pb.i

# target to preprocess a source file
brpc/nshead_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.i
.PHONY : brpc/nshead_meta.pb.cc.i

brpc/nshead_meta.pb.s: brpc/nshead_meta.pb.cc.s

.PHONY : brpc/nshead_meta.pb.s

# target to generate assembly for a file
brpc/nshead_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/nshead_meta.pb.cc.s
.PHONY : brpc/nshead_meta.pb.cc.s

brpc/options.pb.o: brpc/options.pb.cc.o

.PHONY : brpc/options.pb.o

# target to build an object file
brpc/options.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.o
.PHONY : brpc/options.pb.cc.o

brpc/options.pb.i: brpc/options.pb.cc.i

.PHONY : brpc/options.pb.i

# target to preprocess a source file
brpc/options.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.i
.PHONY : brpc/options.pb.cc.i

brpc/options.pb.s: brpc/options.pb.cc.s

.PHONY : brpc/options.pb.s

# target to generate assembly for a file
brpc/options.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/options.pb.cc.s
.PHONY : brpc/options.pb.cc.s

brpc/policy/baidu_rpc_meta.pb.o: brpc/policy/baidu_rpc_meta.pb.cc.o

.PHONY : brpc/policy/baidu_rpc_meta.pb.o

# target to build an object file
brpc/policy/baidu_rpc_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.o
.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.o

brpc/policy/baidu_rpc_meta.pb.i: brpc/policy/baidu_rpc_meta.pb.cc.i

.PHONY : brpc/policy/baidu_rpc_meta.pb.i

# target to preprocess a source file
brpc/policy/baidu_rpc_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.i
.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.i

brpc/policy/baidu_rpc_meta.pb.s: brpc/policy/baidu_rpc_meta.pb.cc.s

.PHONY : brpc/policy/baidu_rpc_meta.pb.s

# target to generate assembly for a file
brpc/policy/baidu_rpc_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/baidu_rpc_meta.pb.cc.s
.PHONY : brpc/policy/baidu_rpc_meta.pb.cc.s

brpc/policy/hulu_pbrpc_meta.pb.o: brpc/policy/hulu_pbrpc_meta.pb.cc.o

.PHONY : brpc/policy/hulu_pbrpc_meta.pb.o

# target to build an object file
brpc/policy/hulu_pbrpc_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.o
.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.o

brpc/policy/hulu_pbrpc_meta.pb.i: brpc/policy/hulu_pbrpc_meta.pb.cc.i

.PHONY : brpc/policy/hulu_pbrpc_meta.pb.i

# target to preprocess a source file
brpc/policy/hulu_pbrpc_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.i
.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.i

brpc/policy/hulu_pbrpc_meta.pb.s: brpc/policy/hulu_pbrpc_meta.pb.cc.s

.PHONY : brpc/policy/hulu_pbrpc_meta.pb.s

# target to generate assembly for a file
brpc/policy/hulu_pbrpc_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/hulu_pbrpc_meta.pb.cc.s
.PHONY : brpc/policy/hulu_pbrpc_meta.pb.cc.s

brpc/policy/mongo.pb.o: brpc/policy/mongo.pb.cc.o

.PHONY : brpc/policy/mongo.pb.o

# target to build an object file
brpc/policy/mongo.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.o
.PHONY : brpc/policy/mongo.pb.cc.o

brpc/policy/mongo.pb.i: brpc/policy/mongo.pb.cc.i

.PHONY : brpc/policy/mongo.pb.i

# target to preprocess a source file
brpc/policy/mongo.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.i
.PHONY : brpc/policy/mongo.pb.cc.i

brpc/policy/mongo.pb.s: brpc/policy/mongo.pb.cc.s

.PHONY : brpc/policy/mongo.pb.s

# target to generate assembly for a file
brpc/policy/mongo.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/mongo.pb.cc.s
.PHONY : brpc/policy/mongo.pb.cc.s

brpc/policy/public_pbrpc_meta.pb.o: brpc/policy/public_pbrpc_meta.pb.cc.o

.PHONY : brpc/policy/public_pbrpc_meta.pb.o

# target to build an object file
brpc/policy/public_pbrpc_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.o
.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.o

brpc/policy/public_pbrpc_meta.pb.i: brpc/policy/public_pbrpc_meta.pb.cc.i

.PHONY : brpc/policy/public_pbrpc_meta.pb.i

# target to preprocess a source file
brpc/policy/public_pbrpc_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.i
.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.i

brpc/policy/public_pbrpc_meta.pb.s: brpc/policy/public_pbrpc_meta.pb.cc.s

.PHONY : brpc/policy/public_pbrpc_meta.pb.s

# target to generate assembly for a file
brpc/policy/public_pbrpc_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/public_pbrpc_meta.pb.cc.s
.PHONY : brpc/policy/public_pbrpc_meta.pb.cc.s

brpc/policy/sofa_pbrpc_meta.pb.o: brpc/policy/sofa_pbrpc_meta.pb.cc.o

.PHONY : brpc/policy/sofa_pbrpc_meta.pb.o

# target to build an object file
brpc/policy/sofa_pbrpc_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.o
.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.o

brpc/policy/sofa_pbrpc_meta.pb.i: brpc/policy/sofa_pbrpc_meta.pb.cc.i

.PHONY : brpc/policy/sofa_pbrpc_meta.pb.i

# target to preprocess a source file
brpc/policy/sofa_pbrpc_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.i
.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.i

brpc/policy/sofa_pbrpc_meta.pb.s: brpc/policy/sofa_pbrpc_meta.pb.cc.s

.PHONY : brpc/policy/sofa_pbrpc_meta.pb.s

# target to generate assembly for a file
brpc/policy/sofa_pbrpc_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/policy/sofa_pbrpc_meta.pb.cc.s
.PHONY : brpc/policy/sofa_pbrpc_meta.pb.cc.s

brpc/proto_base.pb.o: brpc/proto_base.pb.cc.o

.PHONY : brpc/proto_base.pb.o

# target to build an object file
brpc/proto_base.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.o
.PHONY : brpc/proto_base.pb.cc.o

brpc/proto_base.pb.i: brpc/proto_base.pb.cc.i

.PHONY : brpc/proto_base.pb.i

# target to preprocess a source file
brpc/proto_base.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.i
.PHONY : brpc/proto_base.pb.cc.i

brpc/proto_base.pb.s: brpc/proto_base.pb.cc.s

.PHONY : brpc/proto_base.pb.s

# target to generate assembly for a file
brpc/proto_base.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/proto_base.pb.cc.s
.PHONY : brpc/proto_base.pb.cc.s

brpc/rpc_dump.pb.o: brpc/rpc_dump.pb.cc.o

.PHONY : brpc/rpc_dump.pb.o

# target to build an object file
brpc/rpc_dump.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.o
.PHONY : brpc/rpc_dump.pb.cc.o

brpc/rpc_dump.pb.i: brpc/rpc_dump.pb.cc.i

.PHONY : brpc/rpc_dump.pb.i

# target to preprocess a source file
brpc/rpc_dump.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.i
.PHONY : brpc/rpc_dump.pb.cc.i

brpc/rpc_dump.pb.s: brpc/rpc_dump.pb.cc.s

.PHONY : brpc/rpc_dump.pb.s

# target to generate assembly for a file
brpc/rpc_dump.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rpc_dump.pb.cc.s
.PHONY : brpc/rpc_dump.pb.cc.s

brpc/rtmp.pb.o: brpc/rtmp.pb.cc.o

.PHONY : brpc/rtmp.pb.o

# target to build an object file
brpc/rtmp.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.o
.PHONY : brpc/rtmp.pb.cc.o

brpc/rtmp.pb.i: brpc/rtmp.pb.cc.i

.PHONY : brpc/rtmp.pb.i

# target to preprocess a source file
brpc/rtmp.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.i
.PHONY : brpc/rtmp.pb.cc.i

brpc/rtmp.pb.s: brpc/rtmp.pb.cc.s

.PHONY : brpc/rtmp.pb.s

# target to generate assembly for a file
brpc/rtmp.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/rtmp.pb.cc.s
.PHONY : brpc/rtmp.pb.cc.s

brpc/span.pb.o: brpc/span.pb.cc.o

.PHONY : brpc/span.pb.o

# target to build an object file
brpc/span.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.o
.PHONY : brpc/span.pb.cc.o

brpc/span.pb.i: brpc/span.pb.cc.i

.PHONY : brpc/span.pb.i

# target to preprocess a source file
brpc/span.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.i
.PHONY : brpc/span.pb.cc.i

brpc/span.pb.s: brpc/span.pb.cc.s

.PHONY : brpc/span.pb.s

# target to generate assembly for a file
brpc/span.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/span.pb.cc.s
.PHONY : brpc/span.pb.cc.s

brpc/streaming_rpc_meta.pb.o: brpc/streaming_rpc_meta.pb.cc.o

.PHONY : brpc/streaming_rpc_meta.pb.o

# target to build an object file
brpc/streaming_rpc_meta.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.o
.PHONY : brpc/streaming_rpc_meta.pb.cc.o

brpc/streaming_rpc_meta.pb.i: brpc/streaming_rpc_meta.pb.cc.i

.PHONY : brpc/streaming_rpc_meta.pb.i

# target to preprocess a source file
brpc/streaming_rpc_meta.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.i
.PHONY : brpc/streaming_rpc_meta.pb.cc.i

brpc/streaming_rpc_meta.pb.s: brpc/streaming_rpc_meta.pb.cc.s

.PHONY : brpc/streaming_rpc_meta.pb.s

# target to generate assembly for a file
brpc/streaming_rpc_meta.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/streaming_rpc_meta.pb.cc.s
.PHONY : brpc/streaming_rpc_meta.pb.cc.s

brpc/trackme.pb.o: brpc/trackme.pb.cc.o

.PHONY : brpc/trackme.pb.o

# target to build an object file
brpc/trackme.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.o
.PHONY : brpc/trackme.pb.cc.o

brpc/trackme.pb.i: brpc/trackme.pb.cc.i

.PHONY : brpc/trackme.pb.i

# target to preprocess a source file
brpc/trackme.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.i
.PHONY : brpc/trackme.pb.cc.i

brpc/trackme.pb.s: brpc/trackme.pb.cc.s

.PHONY : brpc/trackme.pb.s

# target to generate assembly for a file
brpc/trackme.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/brpc/trackme.pb.cc.s
.PHONY : brpc/trackme.pb.cc.s

idl_options.pb.o: idl_options.pb.cc.o

.PHONY : idl_options.pb.o

# target to build an object file
idl_options.pb.cc.o:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.o
.PHONY : idl_options.pb.cc.o

idl_options.pb.i: idl_options.pb.cc.i

.PHONY : idl_options.pb.i

# target to preprocess a source file
idl_options.pb.cc.i:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.i
.PHONY : idl_options.pb.cc.i

idl_options.pb.s: idl_options.pb.cc.s

.PHONY : idl_options.pb.s

# target to generate assembly for a file
idl_options.pb.cc.s:
	$(MAKE) $(MAKESILENT) -f CMakeFiles/PROTO_LIB.dir/build.make CMakeFiles/PROTO_LIB.dir/idl_options.pb.cc.s
.PHONY : idl_options.pb.cc.s

# Help Target
help:
	@echo "The following are some of the valid targets for this Makefile:"
	@echo "... all (the default if no target is provided)"
	@echo "... clean"
	@echo "... depend"
	@echo "... edit_cache"
	@echo "... install"
	@echo "... install/local"
	@echo "... install/strip"
	@echo "... list_install_components"
	@echo "... package"
	@echo "... package_source"
	@echo "... rebuild_cache"
	@echo "... BUTIL_LIB"
	@echo "... PROTO_LIB"
	@echo "... SOURCES_LIB"
	@echo "... brpc-shared"
	@echo "... brpc-static"
	@echo "... parallel_http"
	@echo "... protoc-gen-mcpack"
	@echo "... rpc_press"
	@echo "... rpc_replay"
	@echo "... rpc_view"
	@echo "... trackme_server"
	@echo "... brpc/builtin_service.pb.o"
	@echo "... brpc/builtin_service.pb.i"
	@echo "... brpc/builtin_service.pb.s"
	@echo "... brpc/errno.pb.o"
	@echo "... brpc/errno.pb.i"
	@echo "... brpc/errno.pb.s"
	@echo "... brpc/get_favicon.pb.o"
	@echo "... brpc/get_favicon.pb.i"
	@echo "... brpc/get_favicon.pb.s"
	@echo "... brpc/get_js.pb.o"
	@echo "... brpc/get_js.pb.i"
	@echo "... brpc/get_js.pb.s"
	@echo "... brpc/nshead_meta.pb.o"
	@echo "... brpc/nshead_meta.pb.i"
	@echo "... brpc/nshead_meta.pb.s"
	@echo "... brpc/options.pb.o"
	@echo "... brpc/options.pb.i"
	@echo "... brpc/options.pb.s"
	@echo "... brpc/policy/baidu_rpc_meta.pb.o"
	@echo "... brpc/policy/baidu_rpc_meta.pb.i"
	@echo "... brpc/policy/baidu_rpc_meta.pb.s"
	@echo "... brpc/policy/hulu_pbrpc_meta.pb.o"
	@echo "... brpc/policy/hulu_pbrpc_meta.pb.i"
	@echo "... brpc/policy/hulu_pbrpc_meta.pb.s"
	@echo "... brpc/policy/mongo.pb.o"
	@echo "... brpc/policy/mongo.pb.i"
	@echo "... brpc/policy/mongo.pb.s"
	@echo "... brpc/policy/public_pbrpc_meta.pb.o"
	@echo "... brpc/policy/public_pbrpc_meta.pb.i"
	@echo "... brpc/policy/public_pbrpc_meta.pb.s"
	@echo "... brpc/policy/sofa_pbrpc_meta.pb.o"
	@echo "... brpc/policy/sofa_pbrpc_meta.pb.i"
	@echo "... brpc/policy/sofa_pbrpc_meta.pb.s"
	@echo "... brpc/proto_base.pb.o"
	@echo "... brpc/proto_base.pb.i"
	@echo "... brpc/proto_base.pb.s"
	@echo "... brpc/rpc_dump.pb.o"
	@echo "... brpc/rpc_dump.pb.i"
	@echo "... brpc/rpc_dump.pb.s"
	@echo "... brpc/rtmp.pb.o"
	@echo "... brpc/rtmp.pb.i"
	@echo "... brpc/rtmp.pb.s"
	@echo "... brpc/span.pb.o"
	@echo "... brpc/span.pb.i"
	@echo "... brpc/span.pb.s"
	@echo "... brpc/streaming_rpc_meta.pb.o"
	@echo "... brpc/streaming_rpc_meta.pb.i"
	@echo "... brpc/streaming_rpc_meta.pb.s"
	@echo "... brpc/trackme.pb.o"
	@echo "... brpc/trackme.pb.i"
	@echo "... brpc/trackme.pb.s"
	@echo "... idl_options.pb.o"
	@echo "... idl_options.pb.i"
	@echo "... idl_options.pb.s"
.PHONY : help



#=============================================================================
# Special targets to cleanup operation of make.

# Special rule to run CMake to check the build system integrity.
# No rule that depends on this can have commands that come from listfiles
# because they might be regenerated.
cmake_check_build_system:
	$(CMAKE_COMMAND) -S$(CMAKE_SOURCE_DIR) -B$(CMAKE_BINARY_DIR) --check-build-system CMakeFiles/Makefile.cmake 0
.PHONY : cmake_check_build_system

